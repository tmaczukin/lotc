# Declare application name
# name will be used by lotc-agent to recognize application
name :test_app

# Declare used images
image :db,  'mysql:5.5-1',    import: './mysql-image-5.5-1.tar.gz' # if image does not exist - import from tar.gz
image :pma, 'phpmyadmin:4.0', pull: true                           # or use `docker pull` in this cas
image :app, 'app:1.3'                                              # 'pull' is default
                                                                   #
                                                                   # After deploy - when manifest and images are saved
                                                                   # on server as deploy artifacts (lotc-agent is saving
                                                                   # last 'N' versions) all images configurations are
                                                                   # rewritten to `import: './image-name.tar.gz'`


# Define containers
container :db_container do
  detach true                                       # run in detached mode
  volume '/var/lib/mysql', '/srv/docker/app1/mysql' # add volume binding
  tcp    3306, 3306, '127.0.0.5'                    # add port binding
  image  :db                                        # set image do use (must be defined in manifest)

  # set command
  cmd    'create_db_and_run', param[:db_name], param[:db_user], param[:db_pass]
end

container :pma_container do
  detach true
  link   :db, :db_container    # add link
  tcp    80, 8080, '127.0.0.5'

  image  :pma
end

container :app_container do
  detach true
  link   :db, :db_container
  env    'DB_NAME', param[:db_name]                    # add env - use param defined in manifest
  env    'DB_USER', param[:db_user]                    # add env
  env    'DB_BASS', param[:db_pass]                    # add env
  env    'APPLICATION_ENV', param[:application_env]    # add env
  volume '/home/app/data', '/srv/docker/app1/app_data'
  tcp    80, 80, '127.0.0.5'

  image  :app
end

# Define container extending previously defined container
container :db_container_tests, extends: :db_container do
  volume '/var/lib/mysql', nil # overwrite volume binding for '/var/lib/mysql' container path (disable)
  tcp    3306, nil             # overwrite port binding (disable)
end

container :app_container_tests, extends: :app_container do |manifest|
  detach   false
  remove   true                     # auto remove container after exit
  link     :db, :db_container_tests
  volume   '/home/app/data', nil
  tcp      80, nil

  cmd      param[:cmd]
end


# Define global manifest params
#
# Params can be overwritten:
#   global => from stage => from task
param :db_name, 'app1'
param :db_user, 'app1_user'
param :db_pass, 'app1_pass'
param :application_env, 'production'

# Define global container stacks
#
# Stack contains only basic-level containers.
# Rest of stack is defined by links between containers
#
# Stack can be overwritten:
#   global => from stage
stack :app, :app_container
stack :tests, :app_container_tests

# Define stages
stage :production

# Define stage extending previously defined stage
stage :development, extends: :production do
  param :application_env, 'development' # overwrite global (or previously overwritten in parent stage) param

  stack :app, :app_container, :pma_container # overwrite global stack
end

stage :testing, :development do
  param :application_env, 'testing'
end


# Define tasks
#
# Each task can be run in each stage.
# The configuration is loaded properly.
task :start do
  # stack_run generates containers stack and run containers in valid order.
  # Output contains live-updated output of first container in stack.
  stack_run :app do |output|
    return if output.match /^Application started!$/
    puts output
  end

  puts 'Application started!'
end

task :stop do

  # Like stack_run but stops containers in valid order
  stack_stop :app do
    puts 'Application stoped'
  end
end

task :hard_restart do
  # stack_containers iterates over containers in stack
  #
  # You can filter collection providing defined containers as a splat.
  stack_containers :app, :app_container do |container|
    container.exec('send-shutdown-notification') # like `docker exec` [container] [command]
    sleep(900)
  end

  # Invoke defined tasks with current stage
  invoke :stop
  invoke :start
end

task :restart do
  stack_containers :app, :app_container do |container|
    container.exec('send-shutdown-notification')
    sleep(900)
  end

  # Runs `docker restart` on each container in stack in valid order
  stack_restart :app
end

task :status do
  stack_containers :app do |c|
    # Gets container
    container.status do |s|
      puts "ID: #{s.id}\tNAME: #{s.name}\tIMAGE: #{s.image.name}\nCREATED: #{s.created}\tSTATUS: #{s.status}\n"
    end
  end
end

task :test do
  param :cmd, 'test-application', '--verbose' # Overwrite previously defined param

  stack_run :tests do |output|
    puts output
  end
end

# Define task extending previously defined
task :spec, extends: :test do
  param :cmd, 'spec-application', '--quiet' # Overwrite previously defined param
end

task :backup do
  stack_containers :app, :app_container do |container|
    container.exec('send-shutdown-notification')
    sleep(900)
    stack_stop :app

    # (...) some data backup code here

    stack_run :app

    # (...) some notifications sending code here
  end
end


# Define deploys
#
# Deploy send configuration via SSH connection and run commands on remote agent.
#
# All configurations (manifests and image archives, if uploaded as tars) are preserved,
# so You can rollback to previously used version.
#
# warning - DB migrations and similar issues you must resolve on your own!
#           LOTC is managing containers - not application inside of them!
deploy :production do
  host 'prod.app1.com' # remote ssh host
  port 2222            # remote ssh port
  user 'app1-user'     # remote user
  via  :upload         # upload all defined image as tar archives
  keep 5               # keep last 5 deploys in archive

  # connect with remote agent and run commands on it
  agent 'unix:///var/run/nazgul.sock' do |agent|
    agent.task :hard_restart, :production # run ':hard_restart' task with ':production' environment
  end
end

deploy :staging do
  host 'staging.app1.com'
  port 2222
  user 'app1-user'
  via  :pull       # use standard `docker pull` for all defined images
  keep 3

  agent 'tcp://127.0.0.1:1234' do |agent|
    agent.run :hard_restart, :production
  end
end

# LOTC is bundled with two executables: lotc and lotc-agent.
#
# lotc is a CLI util - You can deploy configuration and execute defined tasks whit it.
#                      It is also used to run defined deploys.
#
# lotc-agent is remote daemon - It is used by deploy to manage versions and execute tasks.
#                               While deploying CLI util is connecting with agent and through
#                               it uploads or pulls images and executes defined tasks.
#
#
# Both tools use manifest files to define configuration.
# But - if You want - You can prepare configuration and/or execute tasks and deploys programatically.
